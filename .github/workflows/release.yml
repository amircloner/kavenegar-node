name: Release and Package

on:
  push:
    branches:
      - master
      - main
    paths:
      - 'package.json'
  workflow_dispatch:
    inputs:
      force_release:
        description: 'Force release even if version unchanged'
        required: false
        default: 'false'

jobs:
  check-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get-version.outputs.version }}
      version-changed: ${{ steps.check-version.outputs.changed }}
      should-release: ${{ steps.should-release.outputs.result }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Get current version
        id: get-version
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Current version: $VERSION"

      - name: Check if version changed
        id: check-version
        run: |
          if git diff HEAD~1 HEAD --name-only | grep -q "package.json"; then
            PREV_VERSION=$(git show HEAD~1:package.json | node -p "JSON.parse(require('fs').readFileSync('/dev/stdin', 'utf8')).version")
            CURR_VERSION=$(node -p "require('./package.json').version")
            echo "Previous version: $PREV_VERSION"
            echo "Current version: $CURR_VERSION"
            if [ "$PREV_VERSION" != "$CURR_VERSION" ]; then
              echo "changed=true" >> $GITHUB_OUTPUT
              echo "Version changed from $PREV_VERSION to $CURR_VERSION"
            else
              echo "changed=false" >> $GITHUB_OUTPUT
              echo "Version unchanged"
            fi
          else
            echo "changed=false" >> $GITHUB_OUTPUT
            echo "package.json not modified"
          fi

      - name: Should release
        id: should-release
        run: |
          if [ "${{ steps.check-version.outputs.changed }}" == "true" ] || [ "${{ github.event.inputs.force_release }}" == "true" ]; then
            echo "result=true" >> $GITHUB_OUTPUT
            echo "Will proceed with release"
          else
            echo "result=false" >> $GITHUB_OUTPUT
            echo "Skipping release - no version change"
          fi

  build-and-release:
    needs: check-version
    if: needs.check-version.outputs.should-release == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm test

      - name: Build project
        run: npm run build

      - name: Create package directory
        run: |
          mkdir -p package-dist
          
      - name: Copy files for packaging
        run: |
          # Copy built files
          cp -r dist/ package-dist/ 2>/dev/null || echo "No dist directory found"
          
          # Copy source files
          cp -r src/ package-dist/
          
          # Copy essential files
          cp package.json package-dist/
          cp index.js package-dist/ 2>/dev/null || echo "No index.js found"
          cp README.md package-dist/ 2>/dev/null || echo "No README.md found"
          cp LICENSE package-dist/ 2>/dev/null || echo "No LICENSE found"
          
          # Copy TypeScript config if exists
          cp tsconfig.json package-dist/ 2>/dev/null || echo "No tsconfig.json found"
          
          echo "Package contents:"
          ls -la package-dist/

      - name: Create zip package
        run: |
          cd package-dist
          zip -r "../kavenegar-v${{ needs.check-version.outputs.version }}.zip" .
          cd ..
          echo "Created package: kavenegar-v${{ needs.check-version.outputs.version }}.zip"
          ls -la *.zip

      - name: Create and push tag
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          TAG_NAME="v${{ needs.check-version.outputs.version }}"
          echo "Creating tag: $TAG_NAME"
          
          # Check if tag already exists
          if git rev-parse "$TAG_NAME" >/dev/null 2>&1; then
            echo "Tag $TAG_NAME already exists, deleting it first"
            git tag -d "$TAG_NAME"
            git push origin --delete "$TAG_NAME" || echo "Remote tag doesn't exist"
          fi
          
          # Create new tag
          git tag -a "$TAG_NAME" -m "Release version ${{ needs.check-version.outputs.version }}"
          git push origin "$TAG_NAME"

      - name: Create GitHub Release
        uses: actions/create-release@v1
        id: create_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ needs.check-version.outputs.version }}
          release_name: Release v${{ needs.check-version.outputs.version }}
          body: |
            ## Release v${{ needs.check-version.outputs.version }}
            
            ### Changes
            - Version bumped to ${{ needs.check-version.outputs.version }}
            
            ### Package Contents
            - Built TypeScript files
            - Source code
            - Package configuration
            - Documentation
            
            Download the zip package below to get the complete SDK package.
          draft: false
          prerelease: false

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./kavenegar-v${{ needs.check-version.outputs.version }}.zip
          asset_name: kavenegar-v${{ needs.check-version.outputs.version }}.zip
          asset_content_type: application/zip

      - name: Upload package as artifact
        uses: actions/upload-artifact@v4
        with:
          name: kavenegar-package-v${{ needs.check-version.outputs.version }}
          path: kavenegar-v${{ needs.check-version.outputs.version }}.zip
          retention-days: 90

  notification:
    needs: [check-version, build-and-release]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Release notification
        run: |
          if [ "${{ needs.check-version.outputs.should-release }}" == "true" ]; then
            if [ "${{ needs.build-and-release.result }}" == "success" ]; then
              echo "‚úÖ Successfully released version ${{ needs.check-version.outputs.version }}"
              echo "üì¶ Package created and uploaded to GitHub Release"
              echo "üè∑Ô∏è Tag v${{ needs.check-version.outputs.version }} created"
            else
              echo "‚ùå Release failed for version ${{ needs.check-version.outputs.version }}"
            fi
          else
            echo "‚ÑπÔ∏è No release needed - version unchanged"
          fi
